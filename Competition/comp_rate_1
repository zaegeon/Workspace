# imports
import numpy as np
import pandas as pd
import os
import scipy.stats as stats
from statsmodels.formula.api import ols
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt

dir = 'C:/Users/입시플랫폼컨텐츠/Desktop/workspace/#경쟁률'
os.chdir(dir)
uni_2023 = pd.read_excel(dir + '/2023_uni.xlsx')
skyssh_lst = ['서울대', '연세대', '고려대', '성균관대', '서강대', '한양대']

skyssh = pd.DataFrame()
for i in skyssh_lst:
    skyssh = pd.concat([skyssh, uni_2023[uni_2023['uni_name'] == i]])

# info
skyssh.info()
skyssh['comp_2022'].max() # 2022년 경쟁률 최댓값 : 20
skyssh[skyssh['comp_2022'] == skyssh['comp_2022'].max()][['uni_name', 'class', 'comp_2022']] # 성균관대 글로벌융합학부
skyssh['comp_2022'].min() # 2022년 경쟁률 최솟값 : 2.31
skyssh[skyssh['comp_2022'] == skyssh['comp_2022'].min()][['uni_name', 'class', 'comp_2022']] # 고려대 가정교육과


# 6개 대학에 대한 2022 경쟁률 확인
plt.hist(skyssh['comp_2022'])
plt.title('Top6-university Histogram')
plt.show()

# 2022 경쟁률 통계량
print(f'2022학년도 경쟁률 평균 : {round(np.average(skyssh["comp_2022"].fillna(0)), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(skyssh["comp_2022"].fillna(0)), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(skyssh["comp_2022"].fillna(0)), 4)}')

# Q-Q plot : 정규성 만족 시 직선 형태
from scipy.stats import probplot
plt.figure()
probplot(skyssh['comp_2022'].fillna(0), plot=plt)
plt.show()

# Shapiro Test : H0 - Data satisfies the regularity
stats.shapiro(skyssh['comp_2022'].fillna(0))

# Min-Max Scaler
X = skyssh['comp_2022'].fillna(0)
X = (X - X.min()) / (X.max() - X.min())

stats.shapiro(X) # Reject H0 → 정규성 X

# Z-Transform
X = skyssh['comp_2022'].fillna(0)
X = (X - X.mean()) / np.std(X)

stats.shapiro(X) # Reject H0 → 정규성 X

# 정규화 전 Data vs. 정규화 후 Data
X = skyssh['comp_2022'].fillna(0)
X = (X - X.min()) / (X.max() - X.min()) # Min-Max Scaling
X = (X - X.mean()) / np.std(X) # Z-Score Standardization

f, axes = plt.subplots(2, 2, figsize=(8, 8))
axes[0][0].boxplot(skyssh['comp_2022'].fillna(0))
probplot(skyssh['comp_2022'], plot=axes[1][0])
axes[0][1].boxplot(X)
probplot(X, plot=axes[1][1])
plt.show()

# delete Outlier
X = skyssh['comp_2022'].fillna(0)
X = X.drop(X[X[X == X.max()].index | X[X == X.min()].index].index)
X = (X - X.min()) / (X.max() - X.min()) # Min-Max Scaling
X = (X - X.mean()) / np.std(X) # Z-Score Standardization

f, axes = plt.subplots(2, 2, figsize=(8,8))
axes[0][0].boxplot(skyssh['comp_2022'].fillna(0))
probplot(skyssh['comp_2022'], plot=axes[1][0])
axes[0][1].boxplot(X)
probplot(X, plot=axes[1][1])
plt.show()

stats.shapiro(X)

# 학교별 2022학년도 경쟁률 통계량
comp_2022 = skyssh[['uni_name', 'comp_2022']].fillna(0)
print("============ 서울대 ============")
print(f'2022학년도 경쟁률 평균 : {round(np.average(comp_2022[comp_2022["uni_name"] == "서울대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(comp_2022[comp_2022["uni_name"] == "서울대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(comp_2022[comp_2022["uni_name"] == "서울대"]["comp_2022"]), 4)}')
print("============ 연세대 ============")
print(f'2022학년도 경쟁률 평균 : {round(np.average(comp_2022[comp_2022["uni_name"] == "연세대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(comp_2022[comp_2022["uni_name"] == "연세대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(comp_2022[comp_2022["uni_name"] == "연세대"]["comp_2022"]), 4)}')
print("============ 고려대 ============")
print(f'2022학년도 경쟁률 평균 : {round(np.average(comp_2022[comp_2022["uni_name"] == "고려대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(comp_2022[comp_2022["uni_name"] == "고려대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(comp_2022[comp_2022["uni_name"] == "고려대"]["comp_2022"]), 4)}')
print("============ 성균관대 ============")
print(f'2022학년도 경쟁률 평균 : {round(np.average(comp_2022[comp_2022["uni_name"] == "성균관대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(comp_2022[comp_2022["uni_name"] == "성균관대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(comp_2022[comp_2022["uni_name"] == "성균관대"]["comp_2022"]), 4)}')
print("============ 서강대 ============")
print(f'2022학년도 경쟁률 평균 : {round(np.average(comp_2022[comp_2022["uni_name"] == "서강대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(comp_2022[comp_2022["uni_name"] == "서강대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(comp_2022[comp_2022["uni_name"] == "서강대"]["comp_2022"]), 4)}')
print("============ 한양대 ============")
print(f'2022학년도 경쟁률 평균 : {round(np.average(comp_2022[comp_2022["uni_name"] == "한양대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 분산 : {round(np.var(comp_2022[comp_2022["uni_name"] == "한양대"]["comp_2022"]), 4)}')
print(f'2022학년도 경쟁률 표준편차 : {round(np.std(comp_2022[comp_2022["uni_name"] == "한양대"]["comp_2022"]), 4)}')

skyssh.sort_values(by='comp_2022', ascending=False)[['uni_name', 'class', 'comp_2022']].head(10)

detail = skyssh.groupby('line_detail')['comp_2022']
detail_df = pd.concat([detail.mean().sort_values(ascending=False), detail.count()], axis=1)
detail_df

# 누적 백분위 분석
skyssh[['uni_name', 'class', 'aply_per', 'comp_2022']].sort_values('aply_per')
# 누적 백분위 최저는 연세대 의예과(0.07), 최고는 한양대 간호학과(5.00)

y = skyssh['comp_2022'].fillna(0)
X = skyssh['aply_per'].fillna(0)

lm = ols('y~X-1', data=skyssh).fit()
lm.summary()

# (누적 백분위 * 인원)으로 보았을 때, 실제 모집 인원과 (누적백분위에 해당하는 인원 수)가 맞을 지 확인
exam_people = 448138
skyssh['accum_people'] = exam_people * skyssh['aply_per']/100

skyssh.sort_values('accum_people')

# 충원인원
replesh_uni = skyssh[skyssh['num_2022'] - skyssh['pre_num_2022'] != 0]
non_replesh_uni = skyssh[skyssh['num_2022'] - skyssh['pre_num_2022'] == 0]

print(f'충원 O 학과수 : {len(replesh_uni)}개, 충원 X 학과수 : {len(non_replesh_uni)}개')
print(f'충원 O 2022 경쟁률 평균 : {round(replesh_uni["comp_2022"].mean(), 4)}, '
      f'충원 X 2022 경쟁률 평균 : {round(non_replesh_uni["comp_2022"].mean(), 4)}')
print(f'충원 O 2022 경쟁률 분산 : {round(replesh_uni["comp_2022"].var(), 4)}, '
      f'충원 X 2022 경쟁률 분산 : {round(non_replesh_uni["comp_2022"].var(), 4)}')
print(f'충원 O 2022 경쟁률 표준편차 : {round(replesh_uni["comp_2022"].std(), 4)}, '
      f'충원 X 2022 경쟁률 표준편차 : {round(non_replesh_uni["comp_2022"].std(), 4)}')

# 결측치 제거 후 Test
t_stat, p_value = stats.ttest_ind(replesh_uni['comp_2022'].dropna(), non_replesh_uni['comp_2022'].dropna())
print('t-statistic :', np.round(t_stat,4), ', P-value :', np.round(p_value,4))

# 결측치 0으로 변환 후 Test
t_stat, p_value = stats.ttest_ind(replesh_uni['comp_2022'].fillna(0), non_replesh_uni['comp_2022'].fillna(0))
print('t-statistic :', np.round(t_stat,4), ', P-value :', np.round(p_value,4))

# 서연고 기준으로 Re-Test
sky = skyssh[skyssh['uni_name'] == '서울대']
sky = pd.concat([sky, skyssh[skyssh['uni_name'] == '연세대']])
sky = pd.concat([sky, skyssh[skyssh['uni_name'] == '고려대']])

replesh_sky = sky[sky['num_2022'] - sky['pre_num_2022'] != 0]
non_replesh_sky = sky[sky['num_2022'] - sky['pre_num_2022'] == 0]

print(f'충원 O 학과수 : {len(replesh_sky)}개, 충원 X 학과수 : {len(non_replesh_sky)}개')
print(f'충원 O 2022 경쟁률 평균 : {round(replesh_sky["comp_2022"].mean(), 4)}, '
      f'충원 X 2022 경쟁률 평균 : {round(non_replesh_sky["comp_2022"].mean(), 4)}')
print(f'충원 O 2022 경쟁률 분산 : {round(replesh_sky["comp_2022"].var(), 4)}, '
      f'충원 X 2022 경쟁률 분산 : {round(non_replesh_sky["comp_2022"].var(), 4)}')
print(f'충원 O 2022 경쟁률 표준편차 : {round(replesh_sky["comp_2022"].std(), 4)}, '
      f'충원 X 2022 경쟁률 표준편차 : {round(non_replesh_sky["comp_2022"].std(), 4)}')

t_stat, p_value = stats.ttest_ind(replesh_sky['comp_2022'].dropna(), non_replesh_sky['comp_2022'].dropna())
print('t-statistic :', np.round(t_stat,4), ', P-value :', np.round(p_value,4))
t_stat, p_value = stats.ttest_ind(replesh_sky['comp_2022'].fillna(0), non_replesh_sky['comp_2022'].fillna(0))
print('t-statistic :', np.round(t_stat,4), ', P-value :', np.round(p_value,4))

# 전년도 충원인원 → 올해 경쟁률 영향 여부 확인
replesh_uni = skyssh[skyssh['num_2021'] / skyssh['pre_num_2021'] > 1]
non_replesh_uni = skyssh[skyssh['num_2021'] / skyssh['pre_num_2021'] <= 1]
print(f'충원 O 학과수 : {len(replesh_uni)}개, 충원 X 학과수 : {len(non_replesh_uni)}개')
print(f'충원 O 2022 경쟁률 평균 : {round(replesh_uni["comp_2022"].mean(), 4)}, '
      f'충원 X 2022 경쟁률 평균 : {round(non_replesh_uni["comp_2022"].mean(), 4)}')
print(f'충원 O 2022 경쟁률 분산 : {round(replesh_uni["comp_2022"].var(), 4)}, '
      f'충원 X 2022 경쟁률 분산 : {round(non_replesh_uni["comp_2022"].var(), 4)}')
print(f'충원 O 2022 경쟁률 표준편차 : {round(replesh_uni["comp_2022"].std(), 4)}, '
      f'충원 X 2022 경쟁률 표준편차 : {round(non_replesh_uni["comp_2022"].std(), 4)}')

# 결측치 제거 후 Test
t_stat, p_value = stats.ttest_ind(replesh_uni['comp_2022'].dropna(), non_replesh_uni['comp_2022'].dropna())
print('t-statistic :', np.round(t_stat,4), ', P-value :', np.round(p_value,4))

# 결측치 0으로 변환 후 Test
t_stat, p_value = stats.ttest_ind(replesh_uni['comp_2022'].fillna(0), non_replesh_uni['comp_2022'].fillna(0))
print('t-statistic :', np.round(t_stat,4), ', P-value :', np.round(p_value,4))

# 직전 경쟁률 2개 차이
last_comp = pd.read_excel('last_comp.xlsx')
last_comp = last_comp.drop(last_comp[last_comp['last_comp_diff'] == 0].index)
X = last_comp['last_comp_diff']
y = last_comp['comp_2022']

# 인원으로 비교
last_aply = round(last_comp['num_2022'] * last_comp['comp_2022'],0)
diff_aply = round(last_comp['num_2022'] * last_comp['last_comp_diff'], 0)
plt.scatter(diff_aply, last_aply)
plt.show()

# 상수항 포함
lm = ols('last_aply ~ diff_aply', data=last_comp).fit()
lm.summary()
# 상수항 X
lm = ols('last_aply ~ diff_aply - 1', data=last_comp).fit()
lm.summary()

# Score
lin_reg = LinearRegression()
X = diff_aply.values.reshape(-1, 1)
y = last_aply.values.reshape(-1, 1)
lin_reg.fit(X, y)
lin_reg.score(X, y)
lin_reg.coef_, lin_reg.intercept_

lin_reg = LinearRegression(fit_intercept=False)
lin_reg.fit(X, y)
lin_reg.score(X, y)
lin_reg.coef_, lin_reg.intercept_

# 2021학년도
last_comp = pd.read_excel('last_comp.xlsx')
last_comp = last_comp.drop(last_comp[last_comp['last_comp_diff_2021'] == 0].index)

diff_aply_2021 = round(last_comp['num_2021'] * last_comp['last_comp_diff_2021'], 0)
last_aply_2021 = round(last_comp['num_2021'] * last_comp['comp_2021'],0)
X_te = diff_aply_2021.values.reshape(-1, 1)
y_te = last_aply_2021.values.reshape(-1, 1)

X_pred = lin_reg.predict(X)
X_te_pred = lin_reg.predict(X_te)

r2_score(X_pred, y)
r2_score(X_te_pred, y_te)

# 2020학년도
last_comp = pd.read_excel('last_comp.xlsx')
last_comp = last_comp.drop(last_comp[last_comp['last_comp_diff_2020'] == 0].index)
diff_aply_2020 = last_comp['last_comp_diff_2020']
last_aply_2020 = last_comp['aply_num_2020']
X_te = diff_aply_2020.values.reshape(-1, 1)
y_te = last_aply_2020.values.reshape(-1, 1)

X_te_pred = lin_reg.predict(X_te)
r2_score(X_te_pred, y_te)

# 3개 학년도로 ML
comp_final = pd.read_excel('comp_final.xlsx')
X = comp_final['last_comp_diff_2020']
X = pd.concat([X, comp_final['last_comp_diff_2021']])
X = pd.concat([X, comp_final['last_comp_diff_2022']])

y = comp_final['aply_num_2020']
y = pd.concat([y, comp_final['aply_num_2021']])
y = pd.concat([y, comp_final['aply_num_2022']])

X.shape, y.shape

lin_reg = LinearRegression()
X = X.values.reshape(-1, 1)
y = y.values.reshape(-1, 1)
X_tr, X_te, y_tr, y_te = train_test_split(X, y, train_size=0.8, random_state=21)
lin_reg.fit(X_tr, y_tr)
lin_reg.score(X_tr, y_tr)
lin_reg.score(X_te, y_te)

print(f'회귀식 : Y = {np.round(lin_reg.coef_,4)}X + {np.round(lin_reg.intercept_,4)}')

X_tr_pred = lin_reg.predict(X_tr)
X_te_pred = lin_reg.predict(X_te)

r2_score(X_tr_pred, y_tr)
r2_score(X_te_pred, y_te)
